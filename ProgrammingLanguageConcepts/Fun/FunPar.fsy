%{
 (* File Fun/FunPar.fsy 
    Parser for micro-ML, a small functional language; multi-argument functions.
    sestoft@itu.dk * 2009-10-19
  *)

 open FunAbsyn;
%}

%token <int> CSTINT
%token <string> NAME
%token <bool> CSTBOOL

%token FUN ARROWR
%token COMMA HASH
%token ELSE END FALSE IF IN LET NOT THEN TRUE
%token PLUS MINUS TIMES DIV MOD
%token EQ NE GT LT GE LE
%token AND OR
%token LPAR RPAR
%token EOF

/* lowest precedence  */
%left ELSE
%left OR
%left AND
%left EQ NE 
%nonassoc GT LT GE LE
%left PLUS MINUS
%left TIMES DIV MOD 
%nonassoc NOT
/* highest precedence  */

%start Main
%type <FunAbsyn.expr> Main Expr AtExpr Const
%type <FunAbsyn.expr> AppExpr
%type <FunAbsyn.expr list> Exprs
%type <string list> Names

%%

Main:
  | Expr EOF                            { $1                     }
;

Expr:
  | AtExpr                              { $1                     }
  | AppExpr                             { $1                     }
  | IF Expr THEN Expr ELSE Expr         { If($2, $4, $6)         }
  | MINUS Expr                          { Prim("-", CstI 0, $2)  }
  | Expr PLUS  Expr                     { Prim("+",  $1, $3)     }
  | Expr MINUS Expr                     { Prim("-",  $1, $3)     }
  | Expr TIMES Expr                     { Prim("*",  $1, $3)     }
  | Expr DIV   Expr                     { Prim("/",  $1, $3)     } 
  | Expr MOD   Expr                     { Prim("%",  $1, $3)     }
  | Expr EQ    Expr                     { Prim("=",  $1, $3)     }
  | Expr NE    Expr                     { Prim("<>", $1, $3)     }
  | Expr GT    Expr                     { Prim(">",  $1, $3)     }
  | Expr LT    Expr                     { Prim("<",  $1, $3)     }
  | Expr GE    Expr                     { Prim(">=", $1, $3)     }
  | Expr LE    Expr                     { Prim("<=", $1, $3)     }
  | Expr AND   Expr                     { Prim("&&", $1, $3)     }
  | Expr OR    Expr                     { Prim("||", $1, $3)     }
  | ExprTup                             { $1                     }
  | HASH CSTINT LPAR NAME RPAR          { Sel($2, Var $4)        }
  | HASH CSTINT ExprTup                 { Sel($2, $3)            }
;


AtExprs:
  | AtExpr                              { [$1]                   }
  | AtExpr AtExprs                      { $1 :: $2               }

Names:
  | NAME                                { [$1]                   }
  | NAME Names                          { $1 :: $2               }

ExprTup:
  | LPAR Exprs RPAR                     { Tup($2)                }

Exprs:
  | Expr                                { [$1]                   }
  | Expr COMMA Exprs                    { $1 :: $3               }

AtExpr:
  | Const                               { $1                     }
  | NAME                                { Var $1                 }
  | LET NAME EQ Expr IN Expr END        { Let($2, $4, $6)        }
  | LET NAME Names EQ Expr IN Expr END  { Letfun($2, $3, $5, $7) }
  | FUN Names ARROWR Expr               { Fun($2, $4)            }
  | ExprTup                             { $1                     }
  | LPAR Expr RPAR                      { $2                     }
;

AppExpr:
  | AtExpr AtExprs                       { Call($1, $2)          }
  | AppExpr AtExprs                      { Call($1, $2)          }
;

Const:
  | CSTINT                              { CstI($1)               }
  | CSTBOOL                             { CstB($1)               }
;
